name: Arch/AUR Release

on:
  push:
    paths:
      - 'VERSION'
    branches:
      - main
  workflow_dispatch:
permissions:
  contents: write

jobs:
  tag_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GPG tools and prepare GNUPGHOME
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gnupg2 pinentry-curses jq
          export GNUPGHOME=$(mktemp -d)
          chmod 700 "$GNUPGHOME"
          echo "allow-loopback-pinentry" > "$GNUPGHOME/gpg-agent.conf"
          echo "use-agent" > "$GNUPGHOME/gpg.conf"
          echo "pinentry-program /usr/bin/pinentry-curses" >> "$GNUPGHOME/gpg-agent.conf"
          echo "GNUPGHOME=$GNUPGHOME" >> $GITHUB_ENV

      - name: Import GPG key into isolated GNUPGHOME
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          gpgconf --kill gpg-agent || true
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo -e "5\ny\n" | gpg --batch --command-fd 0 --expert --edit-key $(gpg --list-secret-keys --with-colons | awk -F: '/^sec/ {print $5; exit}') trust quit || true

      - name: Read version and find next available tag
        id: version
        run: |
          base_ver=$(cat VERSION | tr -d '\n\r' | xargs)
          git fetch --tags origin || true
          counter=0
          while true; do
            if [ $counter -eq 0 ]; then
              test_version="$base_ver"
              test_tag="v$test_version"
            else
              test_version="$base_ver.$counter"
              test_tag="v$test_version"
            fi
            if ! git tag -l "$test_tag" | grep -q "$test_tag" && ! git ls-remote --tags origin | grep -q "refs/tags/$test_tag"; then
              final_version="$test_version"
              final_tag="$test_tag"
              break
            fi
            counter=$((counter + 1))
            if [ $counter -gt 100 ]; then
              echo "ERROR: Could not find available version after 100 attempts"
              exit 1
            fi
          done
          echo "Base version from file: $base_ver"
          echo "Final version to use: $final_version"
          echo "Final tag to create: $final_tag"
          echo "version=$final_version" >> $GITHUB_OUTPUT
          echo "tag=$final_tag" >> $GITHUB_OUTPUT
          echo "release_msg=AUR Release $final_tag" >> $GITHUB_OUTPUT
          echo "skip_release=false" >> $GITHUB_OUTPUT

      - name: Get GPG key ID
        id: gpg
        run: |
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/ {print $5; exit}')
          if [ -z "$KEYID" ]; then
            echo "ERROR: No GPG key found"
            exit 1
          fi
          echo "keyid=$KEYID" >> $GITHUB_OUTPUT
          echo "Found GPG Key ID: $KEYID"

      - name: Configure git for GPG signing
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.signingkey "${{ steps.gpg.outputs.keyid }}"
          git config commit.gpgSign true
          git config tag.gpgSign true
          git config gpg.program gpg

      - name: Create and Push signed tag
        env:
          TAG: ${{ steps.version.outputs.tag }}
          MSG: ${{ steps.version.outputs.release_msg }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -euo pipefail
          git fetch origin
          echo "Creating signed tag: $TAG"
          gpg-agent --daemon --allow-preset-passphrase --max-cache-ttl 3600 || true
          echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback \
            --sign --armor --detach-sign --local-user "${{ steps.gpg.outputs.keyid }}" \
            --output /tmp/dummy.sig <(echo "test") || true
          echo "$GPG_PASSPHRASE" | git -c "gpg.program=gpg" \
            -c "user.signingkey=${{ steps.gpg.outputs.keyid }}" \
            tag -s "$TAG" -m "$MSG" HEAD
          git push origin "$TAG"
          echo "Successfully created and pushed signed tag: $TAG"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.release_msg }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |            
            ## This release contains the package files for the Arch User Repository (AUR).
            
            [![AUR](https://img.shields.io/aur/version/coolerdash-git?color=blue&label=AUR)](https://aur.archlinux.org/packages/coolerdash-git)

            ### Changes
            - Version updated to ${{ steps.version.outputs.version }}
            
            ### Installation
            ```bash
            # Install from AUR
            yay -S coolerdash-git
            # or
            paru -S coolerdash-git
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify tag signature
        run: |
          echo "Verifying tag signature..."
          git tag -v "${{ steps.version.outputs.tag }}" || echo "Tag verification completed"
          echo "Release completed successfully!"
          echo "Signed tag created: ${{ steps.version.outputs.tag }}"
          echo "GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"

      - name: Cleanup GPG environment
        if: always()
        run: |
          echo "Cleaning up GPG environment..."
          if [ -n "$GNUPGHOME" ] && [ -d "$GNUPGHOME" ]; then
            gpgconf --kill gpg-agent || true
            rm -rf "$GNUPGHOME"
            echo "Removed GNUPGHOME: $GNUPGHOME"
          fi
          for key in $(gpg --list-secret-keys --with-colons 2>/dev/null | awk -F: '/^sec/ {print $5}'); do
            gpg --batch --yes --delete-secret-keys "$key" || true
          done
          for key in $(gpg --list-keys --with-colons 2>/dev/null | awk -F: '/^pub/ {print $5}'); do
            gpg --batch --yes --delete-keys "$key" || true
          done
          echo "✅ GPG cleanup completed."

  aur-release-summary:
    name: AUR Release Summary
    runs-on: ubuntu-latest
    needs: [tag_and_release]
    if: always()  # Runs even if previous jobs fail
    
    steps:
      - name: Create summary report
        run: |
          echo "## 🚀 CoolerDash AUR Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Actions Performed:" >> $GITHUB_STEP_SUMMARY
          echo "✅ **GPG Key Setup**: Isolated environment configured" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Version Detection**: Automatic version resolution from VERSION file" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Tag Creation**: GPG-signed tag created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **GitHub Release**: Release created with installation instructions" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Signature Verification**: Tag signature validated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Features:" >> $GITHUB_STEP_SUMMARY
          echo "🔐 **GPG Signing**: All tags cryptographically signed" >> $GITHUB_STEP_SUMMARY
          echo "🔐 **Isolated Environment**: Secure GPG key handling" >> $GITHUB_STEP_SUMMARY
          echo "🔐 **Automated Verification**: Signature integrity checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "📦 **AUR Package Update**: The AUR package will be updated automatically" >> $GITHUB_STEP_SUMMARY
          echo "📦 **User Installation**: Users can install via \`yay -S coolerdash-git\` or \`paru -S coolerdash-git\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **View Release**: [GitHub Release Link](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **View Workflow Logs**: [Actions Link](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY