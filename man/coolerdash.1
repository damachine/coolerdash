.TH COOLERDASH 1 "July 2025" "coolerdash 1.25.07.16.0000" "User Commands"
.SH NAME
coolerdash \- CoolerDash Temperature Monitor (Professional Modular C Daemon)
.SH SYNOPSIS
.B coolerdash
.br
.B coolerdash
[\fB\-\-help\fR]
.SH DESCRIPTION
.B coolerdash
is a modular, high-performance C99 system daemon for Linux that displays real-time CPU and GPU temperatures on the LCD of supported liquid coolers (e.g. NZXT Kraken). CoolerDash integrates natively with the CoolerControl REST API and provides a professional, production-ready service with strict C99 compliance and systemd integration.

The program always runs in a fixed two-box layout (CPU top, GPU bottom) for clear, reliable temperature monitoring. No display mode selection or coolant display is available in this version; only essential sensor data is shown for maximum stability and performance.

All device communication is handled via the CoolerControl REST API—no Python dependencies required. All actions and errors are logged in detail via systemd for robust service management.

.SH CODING STANDARDS
The source code follows strict ISO/IEC 9899:1999 (C99) and project coding standards:
.TP
- Build and packaging standards: see PKGBUILD and Makefile

.SH ARCHITECTURE
The program follows the standard C project structure:
.TP
.I src/
Source code files (.c)
.TP
.I include/
Header files (.h) and central configuration
.TP
.I build/
Compiled object files (.o)
.TP
.I man/
Documentation
.TP
.I PKGBUILD
Arch Linux packaging script
.TP
.I Makefile
Build and install automation
.TP
.I etc/systemd/coolerdash.service
Systemd service file
.TP
.I src/main.c
Daemon management and sensor coordination
.TP
.I include/config.h
Central configuration (UUID, paths, colors, layout)
.TP
.I src/config.c
Configuration file parsing and validation
.TP
.I src/monitor.c
CPU and GPU temperature monitoring via sensors
.TP
.I src/display.c
Rendering engine and Cairo graphics
.TP
.I src/coolercontrol.c
REST API communication and session management

.SH OPTIONS
.TP
.BR \-\-help
Shows help information and usage examples

.SH FILES
.TP
.I /usr/bin/coolerdash
Main program executable (installed location)
.TP
.I /opt/coolerdash/
Installation directory with binaries and resources
.TP
.I /opt/coolerdash/images/
Generated temperature images and resources
.TP
.I /etc/systemd/system/coolerdash.service
Systemd service file
.TP
.I /run/coolerdash/coolerdash.pid
PID file for process management (runtime directory)
.TP
.I /etc/coolerdash/config.ini
Main runtime configuration file
.TP
.I VERSION
Version information file
.TP
.I PKGBUILD
Arch Linux packaging script
.TP
.I Makefile
Build and install automation

.SH EXAMPLES
.TP
Start program (fixed two-box layout, CPU/GPU temperature only):
.B coolerdash
.TP
Show help:
.B coolerdash --help
.TP
Service management:
.B systemctl start coolerdash
.br
.B systemctl status coolerdash
.br
.B journalctl -u coolerdash -f

.SH SYSTEMD INTEGRATION
The program provides professional systemd integration with detailed logs:
.TP
.B Service Installation
.B make install
.br
Automatically installs the service and restarts it on updates.
.TP
.B Service Management
.B systemctl enable coolerdash.service
.br
.B systemctl start coolerdash.service
.br
.B systemctl status coolerdash.service
.TP
.B Detailed Logs
.B journalctl -u coolerdash.service --since "10 minutes ago"
.br
Shows module initialization, CoolerControl connection, and operating status.
.TP
.B Makefile Service Shortcuts
.B make start, make stop, make restart, make status, make logs

.SH PERFORMANCE OPTIMIZATIONS
The streamlined design offers the following performance benefits:
.TP
.B Minimal I/O
Only temperature sensors are read for CPU and GPU (no mode-dependent logic).
.TP
.B Sensor data caching
CPU: hwmon paths are cached at startup.
GPU: 2.5-second cache with nvidia-smi.
.TP
.B Change detection
Display updates only on significant changes (0.1°C for temperatures).

.SH SECURITY ARCHITECTURE
CoolerDash follows security best practices and does not require root privileges:
.TP
.B Dedicated User Service
Runs as user 'coolerdash' via systemd, not as root.
.TP
.B API Communication Only
Communicates via CoolerControl's HTTP REST API (port 11987) - no direct hardware access.
.TP
.B Process Isolation
Uses systemd's security features: ProtectSystem=full, dedicated RuntimeDirectory.
.TP
.B Secure PID Management
Atomic PID file operations with proper permissions and validation.

.SH CONFIGURATION
All important runtime and build-time settings are managed via configuration files:
.TP
.B /etc/coolerdash/config.ini (RECOMMENDED)
Main runtime configuration file. Edit this file to change display, thresholds, colors, paths, and daemon settings without recompiling.
After editing, restart the service with:
.br
\fBsystemctl restart coolerdash.service\fR
.br
Values in config.ini always take precedence over those in include/config.h.
If config.ini is missing, all settings from include/config.h are used as defaults.
.TP
.B include/config.h
Build-time defaults for all configuration values. Edit before compiling to set initial values for display, thresholds, colors, and paths.

.SH DEPENDENCIES
.TP
.B CoolerControl (REQUIRED)
Must be installed and running (coolercontrold.service and coolercontrol-liqctld.service)
.br
Installation guide: https://gitlab.com/coolercontrol/coolercontrol/-/blob/main/README.md
.TP
.B Build Dependencies
GCC with C99 support, Make, pkg-config
.TP
.B Runtime Libraries
Cairo (graphics rendering), cURL (HTTP client), jansson (JSON parsing), inih (INI file parsing)
.TP
.B Optional Runtime Dependencies
nvidia-smi (for NVIDIA GPU temperature monitoring), hwmon kernel module (CPU sensors)

.SH INSTALLATION
Installs the main binary to /usr/bin/coolerdash.
Resources and images are installed to /opt/coolerdash/.
Systemd service file is installed to /etc/systemd/system/coolerdash.service.
Default config file is installed to /etc/coolerdash/config.ini.
Runtime directory /run/coolerdash/ is created automatically by systemd.
.TP
.B Standard Installation
.B make install
.br
Installs all components and enables the systemd service.
.TP
.B PKGBUILD and AUR
Arch Linux users can build and install via PKGBUILD and AUR. See PKGBUILD for details.

.SH UNINSTALL
.TP
.B Standard Uninstall
.B make uninstall
.br
Stops and disables the service, removes all installed files from /usr/bin/, /opt/coolerdash/, and /etc/systemd/system/.
The config file /etc/coolerdash/config.ini is preserved unless unchanged from defaults.
.TP
.B Manual Cleanup
If needed, manually remove remaining files:
.br
.B rm -rf /opt/coolerdash/ /etc/coolerdash/
.TP
.B PKGBUILD
Arch Linux users can uninstall via package manager: \fBpacman -R coolerdash\fR

.SH USAGE
.TP
.B Start program (fixed two-box layout, CPU/GPU temperature only):
.B coolerdash
.TP
.B Show help:
.B coolerdash --help
.TP
.B Service management:
.B systemctl start coolerdash
.br
.B systemctl status coolerdash
.br
.B systemctl restart coolerdash
.br
.B journalctl -u coolerdash -f

> **Note:** The systemd service must be stopped before running manually to avoid conflicts:
.B
systemctl stop coolerdash.service

.SH NOTES
- All runtime settings can be changed via /etc/coolerdash/config.ini.
- After editing config.ini, restart the service to apply changes.
- If config.ini is missing, build-time defaults from include/config.h are used.
- No legacy mode selection, cache directories, or UID files are used.
- All code is documented with Doxygen-style comments and follows strict coding standards.
- See PKGBUILD and Makefile for build and packaging documentation.

.SH BUGS
Report bugs to: christkue79@gmail.com or via GitHub Issues: https://github.com/damachine/coolerdash/issues
.TP
- All known bugs are documented in the source code with Doxygen @bug comments.

.SH AUTHOR
Written by DAMACHINE (christkue79@gmail.com).

.SH SEE ALSO
.BR systemctl (1),
.BR coolercontrol (1),
.BR nvidia-smi (1),
.BR journalctl (1)
.br
Project repository: https://github.com/damachine/coolerdash

.SH COPYRIGHT
Copyright © 2025 DAMACHINE. This is free software; see source for copying conditions.
Released under MIT License.
